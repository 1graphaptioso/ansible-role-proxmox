---
# tasks file for ansible-role-proxmox
- name: Gather distribution specific variables
  include_vars: "debian-{{ ansible_distribution_release }}.yml"

- assert:
    that:
      - "hostvars[item].ansible_default_ipv4.address is defined"
    msg: "Missing IP address and other information for {{ item }}. Have you gathered its facts?"
  with_items: "{{ groups[pve_group] }}"

- include: ssh_cluster_config.yml

- name: Enumerate all cluster hosts within the hosts file
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED: Proxmox Cluster Hosts"
    content: |
      {% for host in groups[pve_group] %}
      {{ hostvars[host].ansible_default_ipv4.address }} {{ hostvars[host].ansible_fqdn }} {{ hostvars[host].ansible_hostname }}{% if ansible_fqdn == hostvars[host].ansible_fqdn %} pvelocalhost{% endif %}

      {% endfor %}

- name: Remove conflicting lines in hosts files
  lineinfile:
    dest: /etc/hosts
    # expanded, this turns out to be, for example:
    # regexp: '^(?!10\.0\.3\.17 test01\.lxc test01( pvelocalhost)?)(?!10\.0\.3\.17)[\w:.]+(\s+.*)?\s(test01\.lxc|test01|pvelocalhost)(\s+.*|\s*)$'
    # basically first we ignore lines that match from the host enumeration task
    # above, then we match against different IPs (e.g. NOT 10.0.3.17) that have
    # the hostname/fqdn we inserted a record for previously, taking care also to
    # detect word boundaries (\b wasn't working for some reason)
    regexp: '^(?!{{ hostvars[item].ansible_default_ipv4.address | regex_escape() }} {{ hostvars[item].ansible_fqdn | regex_escape() }} {{ hostvars[item].ansible_hostname | regex_escape() }}( pvelocalhost)?)(?!{{ hostvars[item].ansible_default_ipv4.address | regex_escape() }})[\w:.]+(\s+.*)?\s({{ hostvars[item].ansible_fqdn | regex_escape() }}|{{ hostvars[item].ansible_hostname | regex_escape() }}{% if ansible_fqdn == hostvars[item].ansible_fqdn %}|pvelocalhost{% endif %})(\s+.*|\s*)$'
    state: absent
    backup: yes
  with_items: "{{ groups[pve_group] }}"

- name: Trust Proxmox' packaging key
  apt_key:
    data: "{{ lookup('file', pve_release_key) }}"
    id: "{{ pve_release_key_id }}"
    state: present

- name: Add Proxmox repository
  apt_repository:
    repo: "{{ pve_repository_line }}"
    filename: proxmox
    state: present

- name: Run dist-upgrade
  apt:
    update_cache: yes
    cache_valid_time: 3600
    upgrade: dist

- name: Remove os-prober package
  apt:
    name: os-prober
    state: absent

- name: Install Proxmox VE and related packages
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - proxmox-ve
    - postfix
    - open-iscsi
    - ksm-control-daemon
    - systemd-sysv
    - patch

- block:

  - name: Remove automatically installed PVE Enterprise repo configuration
    apt_repository:
      repo: "deb https://enterprise.proxmox.com/debian jessie pve-enterprise"
      filename: pve-enterprise
      state: absent

  - name: Remove subscription check wrapper function in web UI
    patch:
      src: 00_remove_checked_command.patch
      dest: /usr/share/pve-manager/js/pvemanagerlib.js
      backup: yes

  when: "'pve-no-subscription' in pve_repository_line"

- name: Check for kernel update
  collect_kernel_info:
    lookup_packages: false
  register: __pve_kernel_update
  when: pve_reboot_on_kernel_update

- block:

  - name: Reboot for kernel update
    command: "shutdown -r +1 'PVE kernel update detected by Ansible, rebooting'"
    async: 0
    poll: 0
    ignore_errors: true

  - name: Wait for server to come back online
    local_action: wait_for port=22 host={{ inventory_hostname }} search_regex=OpenSSH delay=60 timeout=450
    become: false

  when:
    - pve_reboot_on_kernel_update
    - __pve_kernel_update.new_kernel_exists

- include: ipmi_watchdog.yml
  when: pve_watchdog == 'ipmi'

- name: Collect kernel package information
  collect_kernel_info:
  register: __pve_kernel

- name: Remove old Debian/PVE kernels
  apt:
    name: "{{ item }}"
    state: absent
    purge: yes
  with_items: 
    - linux-image-amd64
    - "{{ __pve_kernel.old_packages }}"
  when:
    - pve_remove_old_kernels

- include: ssl_config.yml
  when:
    - pve_ssl_private_key is defined
    - pve_ssl_certificate is defined

- name: LDAP fix for authenticated search
  lineinfile:
    line: "    $ldap->bind('{{ pve_ldap_bind_user }}', password => '{{ pve_ldap_bind_password }}');"
    insertbefore: "ldap->search\\("
    dest: /usr/share/perl5/PVE/Auth/LDAP.pm
  notify:
    - restart pvedaemon
  when:
    - pve_ldap_bind_user is defined
    - pve_ldap_bind_password is defined

